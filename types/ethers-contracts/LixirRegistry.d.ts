/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LixirRegistryInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PERFORMANCE_FEE_PRECISION()": FunctionFragment;
    "addRole(bytes32,bytes32)": FunctionFragment;
    "delegate_role()": FunctionFragment;
    "deployer_role()": FunctionFragment;
    "eth_vault_implementation_role()": FunctionFragment;
    "factory_role()": FunctionFragment;
    "feeTo()": FunctionFragment;
    "fee_setter_role()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "gov_role()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "isGovOrDelegate(address)": FunctionFragment;
    "keeper_role()": FunctionFragment;
    "pauser_role()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "strategist_role()": FunctionFragment;
    "strategy_role()": FunctionFragment;
    "uniV3Factory()": FunctionFragment;
    "vault_implementation_role()": FunctionFragment;
    "vault_role()": FunctionFragment;
    "weth9()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERFORMANCE_FEE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addRole",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "delegate_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployer_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "eth_vault_implementation_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "factory_role",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fee_setter_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "gov_role", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isGovOrDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "keeper_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pauser_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "strategist_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strategy_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vault_implementation_role",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vault_role",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weth9", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERFORMANCE_FEE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegate_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployer_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eth_vault_implementation_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factory_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fee_setter_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov_role", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isGovOrDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keeper_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pauser_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strategist_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategy_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vault_implementation_role",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault_role", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth9", data: BytesLike): Result;

  events: {
    "FeeToChanged(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeToChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export class LixirRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LixirRegistryInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    PERFORMANCE_FEE_PRECISION(overrides?: CallOverrides): Promise<[number]>;

    addRole(
      role: BytesLike,
      roleAdmin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegate_role(overrides?: CallOverrides): Promise<[string]>;

    deployer_role(overrides?: CallOverrides): Promise<[string]>;

    eth_vault_implementation_role(overrides?: CallOverrides): Promise<[string]>;

    factory_role(overrides?: CallOverrides): Promise<[string]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    fee_setter_role(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gov_role(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGovOrDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    keeper_role(overrides?: CallOverrides): Promise<[string]>;

    pauser_role(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strategist_role(overrides?: CallOverrides): Promise<[string]>;

    strategy_role(overrides?: CallOverrides): Promise<[string]>;

    uniV3Factory(overrides?: CallOverrides): Promise<[string]>;

    vault_implementation_role(overrides?: CallOverrides): Promise<[string]>;

    vault_role(overrides?: CallOverrides): Promise<[string]>;

    weth9(overrides?: CallOverrides): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  PERFORMANCE_FEE_PRECISION(overrides?: CallOverrides): Promise<number>;

  addRole(
    role: BytesLike,
    roleAdmin: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegate_role(overrides?: CallOverrides): Promise<string>;

  deployer_role(overrides?: CallOverrides): Promise<string>;

  eth_vault_implementation_role(overrides?: CallOverrides): Promise<string>;

  factory_role(overrides?: CallOverrides): Promise<string>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  fee_setter_role(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gov_role(overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGovOrDelegate(account: string, overrides?: CallOverrides): Promise<boolean>;

  keeper_role(overrides?: CallOverrides): Promise<string>;

  pauser_role(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strategist_role(overrides?: CallOverrides): Promise<string>;

  strategy_role(overrides?: CallOverrides): Promise<string>;

  uniV3Factory(overrides?: CallOverrides): Promise<string>;

  vault_implementation_role(overrides?: CallOverrides): Promise<string>;

  vault_role(overrides?: CallOverrides): Promise<string>;

  weth9(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    PERFORMANCE_FEE_PRECISION(overrides?: CallOverrides): Promise<number>;

    addRole(
      role: BytesLike,
      roleAdmin: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegate_role(overrides?: CallOverrides): Promise<string>;

    deployer_role(overrides?: CallOverrides): Promise<string>;

    eth_vault_implementation_role(overrides?: CallOverrides): Promise<string>;

    factory_role(overrides?: CallOverrides): Promise<string>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    fee_setter_role(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov_role(overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGovOrDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    keeper_role(overrides?: CallOverrides): Promise<string>;

    pauser_role(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    strategist_role(overrides?: CallOverrides): Promise<string>;

    strategy_role(overrides?: CallOverrides): Promise<string>;

    uniV3Factory(overrides?: CallOverrides): Promise<string>;

    vault_implementation_role(overrides?: CallOverrides): Promise<string>;

    vault_role(overrides?: CallOverrides): Promise<string>;

    weth9(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    FeeToChanged(
      previousFeeTo?: string | null,
      newFeeTo?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    PERFORMANCE_FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    addRole(
      role: BytesLike,
      roleAdmin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegate_role(overrides?: CallOverrides): Promise<BigNumber>;

    deployer_role(overrides?: CallOverrides): Promise<BigNumber>;

    eth_vault_implementation_role(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory_role(overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    fee_setter_role(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov_role(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGovOrDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper_role(overrides?: CallOverrides): Promise<BigNumber>;

    pauser_role(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strategist_role(overrides?: CallOverrides): Promise<BigNumber>;

    strategy_role(overrides?: CallOverrides): Promise<BigNumber>;

    uniV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    vault_implementation_role(overrides?: CallOverrides): Promise<BigNumber>;

    vault_role(overrides?: CallOverrides): Promise<BigNumber>;

    weth9(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERFORMANCE_FEE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addRole(
      role: BytesLike,
      roleAdmin: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegate_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eth_vault_implementation_role(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fee_setter_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGovOrDelegate(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strategist_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    strategy_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vault_implementation_role(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault_role(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth9(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
