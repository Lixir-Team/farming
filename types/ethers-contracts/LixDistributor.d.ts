/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LixDistributorInterface extends ethers.utils.Interface {
  functions: {
    "available_to_distribute()": FunctionFragment;
    "update_mining_parameters()": FunctionFragment;
    "start_epoch_time_write()": FunctionFragment;
    "future_epoch_time_write()": FunctionFragment;
    "distributable_in_timeframe(uint256,uint256)": FunctionFragment;
    "distribute(address)": FunctionFragment;
    "dist_many(address[8])": FunctionFragment;
    "recover_balance(address)": FunctionFragment;
    "initial_supply()": FunctionFragment;
    "mining_epoch()": FunctionFragment;
    "start_epoch_time()": FunctionFragment;
    "rate()": FunctionFragment;
    "lix()": FunctionFragment;
    "controller()": FunctionFragment;
    "admin()": FunctionFragment;
    "emergency_return()": FunctionFragment;
    "distributed(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "available_to_distribute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "update_mining_parameters",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "future_epoch_time_write",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributable_in_timeframe",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "distribute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dist_many",
    values: [[string, string, string, string, string, string, string, string]]
  ): string;
  encodeFunctionData(
    functionFragment: "recover_balance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initial_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mining_epoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "start_epoch_time",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(functionFragment: "lix", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "controller",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergency_return",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributed",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "available_to_distribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "update_mining_parameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_epoch_time_write",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributable_in_timeframe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dist_many", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recover_balance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initial_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mining_epoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "start_epoch_time",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lix", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "controller", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergency_return",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributed",
    data: BytesLike
  ): Result;

  events: {
    "UpdateMiningParameters(uint256,uint256,uint256)": EventFragment;
    "Distributed(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "UpdateMiningParameters"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Distributed"): EventFragment;
}

export class LixDistributor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LixDistributorInterface;

  functions: {
    available_to_distribute(overrides?: CallOverrides): Promise<[BigNumber]>;

    update_mining_parameters(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    future_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    distribute(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dist_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recover_balance(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initial_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    mining_epoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    start_epoch_time(overrides?: CallOverrides): Promise<[BigNumber]>;

    rate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lix(overrides?: CallOverrides): Promise<[string]>;

    controller(overrides?: CallOverrides): Promise<[string]>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    emergency_return(overrides?: CallOverrides): Promise<[string]>;

    distributed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  available_to_distribute(overrides?: CallOverrides): Promise<BigNumber>;

  update_mining_parameters(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start_epoch_time_write(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  future_epoch_time_write(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributable_in_timeframe(
    start: BigNumberish,
    end: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  distribute(
    gauge_addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dist_many(
    gauge_addrs: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recover_balance(
    _coin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initial_supply(overrides?: CallOverrides): Promise<BigNumber>;

  mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

  start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

  rate(overrides?: CallOverrides): Promise<BigNumber>;

  lix(overrides?: CallOverrides): Promise<string>;

  controller(overrides?: CallOverrides): Promise<string>;

  admin(overrides?: CallOverrides): Promise<string>;

  emergency_return(overrides?: CallOverrides): Promise<string>;

  distributed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    available_to_distribute(overrides?: CallOverrides): Promise<BigNumber>;

    update_mining_parameters(overrides?: CallOverrides): Promise<void>;

    start_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    future_epoch_time_write(overrides?: CallOverrides): Promise<BigNumber>;

    distributable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(gauge_addr: string, overrides?: CallOverrides): Promise<void>;

    dist_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    recover_balance(_coin: string, overrides?: CallOverrides): Promise<boolean>;

    initial_supply(overrides?: CallOverrides): Promise<BigNumber>;

    mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    lix(overrides?: CallOverrides): Promise<string>;

    controller(overrides?: CallOverrides): Promise<string>;

    admin(overrides?: CallOverrides): Promise<string>;

    emergency_return(overrides?: CallOverrides): Promise<string>;

    distributed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    UpdateMiningParameters(
      time?: null,
      rate?: null,
      supply?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { time: BigNumber; rate: BigNumber; supply: BigNumber }
    >;

    Distributed(
      recipient?: string | null,
      gauge?: null,
      distributed?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { recipient: string; gauge: string; distributed: BigNumber }
    >;
  };

  estimateGas: {
    available_to_distribute(overrides?: CallOverrides): Promise<BigNumber>;

    update_mining_parameters(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    future_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distribute(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dist_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recover_balance(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initial_supply(overrides?: CallOverrides): Promise<BigNumber>;

    mining_epoch(overrides?: CallOverrides): Promise<BigNumber>;

    start_epoch_time(overrides?: CallOverrides): Promise<BigNumber>;

    rate(overrides?: CallOverrides): Promise<BigNumber>;

    lix(overrides?: CallOverrides): Promise<BigNumber>;

    controller(overrides?: CallOverrides): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    emergency_return(overrides?: CallOverrides): Promise<BigNumber>;

    distributed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    available_to_distribute(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update_mining_parameters(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    future_epoch_time_write(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributable_in_timeframe(
      start: BigNumberish,
      end: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    distribute(
      gauge_addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dist_many(
      gauge_addrs: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string
      ],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recover_balance(
      _coin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initial_supply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mining_epoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start_epoch_time(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lix(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    controller(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergency_return(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    distributed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
