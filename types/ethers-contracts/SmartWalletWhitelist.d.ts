/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SmartWalletWhitelistInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "applySetChecker()": FunctionFragment;
    "approveWallet(address)": FunctionFragment;
    "check(address)": FunctionFragment;
    "checker()": FunctionFragment;
    "commitSetChecker(address)": FunctionFragment;
    "future_checker()": FunctionFragment;
    "revokeWallet(address)": FunctionFragment;
    "wallets(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "applySetChecker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "check", values: [string]): string;
  encodeFunctionData(functionFragment: "checker", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitSetChecker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "future_checker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeWallet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "wallets", values: [string]): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "applySetChecker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checker", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitSetChecker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "future_checker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallets", data: BytesLike): Result;

  events: {
    "ApproveWallet(address)": EventFragment;
    "RevokeWallet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeWallet"): EventFragment;
}

export class SmartWalletWhitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SmartWalletWhitelistInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    applySetChecker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    check(_wallet: string, overrides?: CallOverrides): Promise<[boolean]>;

    checker(overrides?: CallOverrides): Promise<[string]>;

    commitSetChecker(
      _checker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    future_checker(overrides?: CallOverrides): Promise<[string]>;

    revokeWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wallets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  applySetChecker(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveWallet(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  check(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

  checker(overrides?: CallOverrides): Promise<string>;

  commitSetChecker(
    _checker: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  future_checker(overrides?: CallOverrides): Promise<string>;

  revokeWallet(
    _wallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    applySetChecker(overrides?: CallOverrides): Promise<void>;

    approveWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;

    check(_wallet: string, overrides?: CallOverrides): Promise<boolean>;

    checker(overrides?: CallOverrides): Promise<string>;

    commitSetChecker(
      _checker: string,
      overrides?: CallOverrides
    ): Promise<void>;

    future_checker(overrides?: CallOverrides): Promise<string>;

    revokeWallet(_wallet: string, overrides?: CallOverrides): Promise<void>;

    wallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    ApproveWallet(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;

    RevokeWallet(
      undefined?: null
    ): TypedEventFilter<[string], { arg0: string }>;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    applySetChecker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    check(_wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    checker(overrides?: CallOverrides): Promise<BigNumber>;

    commitSetChecker(
      _checker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    future_checker(overrides?: CallOverrides): Promise<BigNumber>;

    revokeWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wallets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    applySetChecker(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    check(
      _wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitSetChecker(
      _checker: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    future_checker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeWallet(
      _wallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
